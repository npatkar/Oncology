require 'open3'

class Pdf < ActiveRecord::Base

  belongs_to :user
  belongs_to :coi_form, :dependent => :delete

  validates_presence_of :user_id
  validates_presence_of :form_type

  before_save :generate_file_name

  attr_accessor :html_src

  def path
    out = dir
    if self.new_record? || ! self.file?
      out += generate_file_name
    else
      out += self.file
    end
  end

  def abs_path
    @abs_path ||= RAILS_ROOT + '/public' + path
  end

  def dir
    @dir ||= '/4fce4853c798a47a5c2c598aa546fa07dkd3/pdfs/' + (self.user_id || 0).to_s + '/'
  end

  def abs_dir
    @abs_dir ||= RAILS_ROOT + '/public' + dir 
  end

  def generate(options = {})
    raise unless self.html_src && self.user_id

    @@html2psrc_config_src  ||= RAILS_ROOT + '/public/stylesheets/html2psrc'
    @@html2psrc_config      ||= RAILS_ROOT + '/public/stylesheets/html2ps.css'
    @@main_css_file         ||= RAILS_ROOT + '/public/stylesheets/main.css'
    @@pdf_override_css_file ||= RAILS_ROOT + '/public/stylesheets/pdf_override.css'

    # create the config file
    FileUtils.copy @@html2psrc_config_src, @@html2psrc_config
    File.open @@html2psrc_config, "w+" do |out_file|
  #    File.open @@main_css_file, "r" do |in_file|
  #      in_file.each_line {|line| out_file.write(line)}
  #    end
      File.open @@pdf_override_css_file, "r" do |in_file|
        in_file.each_line {|line| out_file.write(line)}
      end
    end

    # Ensure our path exists
    FileUtils.mkdir_p(abs_dir) unless File.exist?(abs_dir)

    # generate the pdf file
    logger.info("*** generating pdf ***")
    exit_code = 0
    Open3.popen3("html2ps -f #{@@html2psrc_config} | ps2pdf - #{abs_path}") do |stdin, stdout, stderr,waitth|
      logger.info("****** html2ps -f #{@@html2psrc_config} | ps2pdf - #{abs_path}")
      File.open RAILS_ROOT + '/tmp/html_src', "w" do |hs_out|
	      hs_out.write(html_src.force_encoding("UTF-8"))
	      stdin.write(html_src.force_encoding("UTF-8"))
	      stdin.close
	      self.output = stderr.readlines
      end
      exit_code = waitth.value
    end 
    #exit_code = $? >> 8
    logger.info("**** stderror=#{self.output} exit_code=#{exit_code}")
    #if exit_code > 0
    #  raise
    #end
    self.save!
  end

private
  def generate_file_name
    self.form_type ||= 'unknown'    
    self.file ||= self.form_type.gsub(/|^-a-zA-Z0-9_.|/, '').gsub(/\.\./, '.') + '-' + Time.now.strftime("%Y%m%d-%H%M%S") + '.pdf'
  end

end
